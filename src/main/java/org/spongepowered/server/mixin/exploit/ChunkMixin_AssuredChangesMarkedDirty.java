/*
 * This file is part of Sponge, licensed under the MIT License (MIT).
 *
 * Copyright (c) SpongePowered <https://www.spongepowered.org>
 * Copyright (c) contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.spongepowered.server.mixin.exploit;

import net.minecraft.entity.Entity;
import net.minecraft.util.ClassInheritanceMultiMap;
import net.minecraft.world.chunk.Chunk;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.Redirect;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;

@Mixin(Chunk.class)
public abstract class ChunkMixin_AssuredChangesMarkedDirty {

    @Shadow public abstract void markDirty();

    /**
     * @author Aikar - July 23rd, 2018
     * @reason Mark chunk dirty any time entities change to guarantee it saves.
     *
     * @see <html>https://github.com/PaperMC/Paper/blob/master/Spigot-Server-Patches/0306-Mark-chunk-dirty-anytime-entities-change-to-guarante.patch</html>
     *
     * @param entityIn The entity being added
     * @param ci The callback
     */
    @Inject(method = "addEntity", at = @At("TAIL"))
    private void assureMarkedDirty$markDirtyOnEntityAdd(final Entity entityIn, final CallbackInfo ci) {
        this.markDirty();
    }

    /**
     * @author Aikar - July 23rd, 2018
     * @reason Mark chunk dirty any time entities change to guarantee it saves.
     *
     * @see <html>https://github.com/PaperMC/Paper/blob/master/Spigot-Server-Patches/0306-Mark-chunk-dirty-anytime-entities-change-to-guarante.patch</html>
     *
     * @param map The map being removed from
     * @param entity The entity being removed
     */
    @SuppressWarnings({"SuspiciousMethodCalls", "rawtypes"})
    @Redirect(method = "removeEntityAtIndex",
        at = @At(value = "INVOKE", target = "Lnet/minecraft/util/ClassInheritanceMultiMap;remove(Ljava/lang/Object;)Z"))
    private boolean assureMarkedDirty$ifEntityRemoveMarkDirty(final ClassInheritanceMultiMap map, final Object entity) {
        if (map.remove(entity)) {
            this.markDirty();
            return true;
        }
        return false;
    }

}
